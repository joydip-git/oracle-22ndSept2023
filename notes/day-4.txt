Exception handling
--------------------------
errors:
	compile time error
	runtime error:

	int[] arr = new int[2];
	for(int i = 0; i< arr.length+1;i++){
		system.out.println(arr[i]);
	}

	the exception object is created by JVM
	ArrayIndexOutOfBoundsException ex = new ArrayIndexOutOfBoundsException(".....");

	the JVM throws the reference of that exception object
	you should catch the exception object reference

	
	try block must be followed by one or more than one catch block
	finally block: any code placed inside finally block will always be executed.
	finally block must be put after try...catch or directly after try block, if catch does not exist
	only one finally can be used with one try...catch

	possible correct combination:
	try...catch
	try...catch...finally
	try...finally

	incorrect:
	individual try block [try block can't exist alone]
	individual catch block [catch block can't exist alone]
	individual finally block [finally block does not exist alone]
	catch..finally

	nesting:
	try{
		//code
		try{}catch(){}finally{}
	}catch(....){
		try{}catch(){}finally{}	
	}finally{
		try{}catch(){}finally{}
	}
 

	Note:
	1. try to catch exception using a catch block with corresponding type of exception class
	2. if you are not sure, then also put a catch block with super class Exception, but the catch block with super class Exception should be the last one in series of catch blocks


	exceptions in Java:
	exception:
		checked: these type of exceptions are checked during compilation time. ex: IOException, SQLException etc.
		unchecked: these type of exceptions are not checked during compile time, rather they are detected during runtime directly. ex: all runtime exceptions
	error: irrecoverable (it is a type of unchecked exception)
	
	create custom exception class:
	-------------------------------------------------------------------
	create a class (naming convention: use the word "Exception" as suffix to the class name)
	inherit from Exception class (base)
	write a default constructor 
	write at least one parameterized constructor which will accept an error message of type String and then by-pass the error message to base class parameterized constructor using super keyword

	usage of custom exception class:
	-------------------------------------------------------------------
	create an instance of the custom exception class wherever necessary. 
	then throw the exception class instance
	declare the method inside the class, which throws exception object, with throws keyword to mention the kind of exception your are throwing or wrap you exception throwing code inside try...catch block and handle it
	wherever you are calling that method, either use try...catch to catch the exception, or if you want to further propagate the exception, then that caller method also should be having throws declaration


